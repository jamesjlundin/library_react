{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","BookPagesInput","props","handleChange","bind","e","this","onInputChange","target","id","value","pages","htmlFor","type","name","onChange","React","Component","BookAuthorInput","author","BookTitleInput","title","AddBooks","handleInputChange","addNewBook","state","setState","onSubmitNewBook","onClick","SingleBook","handleChangeReadStatus","handleRemoveBook","onReadStatusChange","onRemoveBook","book","className","replace","hasRead","DataTable","passReadStatusChange","passRemoveBook","booktitle","changeReadStatus","removeBook","rows","books","forEach","push","key","TableHeader","Library","addABook","thebooks","newArray","bookTitle","newBook","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.154ca07b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass BookPagesInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onInputChange(e.target.id, e.target.value);\n  }\n\n  render() {\n    const pages = this.props.pages;\n    return (\n      <div>\n        <label htmlFor=\"pages\">Pages: </label>\n        <input  type={'number'} \n                id={`pages`} \n                name={'pages'}\n                value={pages} \n                onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nclass BookAuthorInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.props.onInputChange(e.target.id, e.target.value);\n  }\n  render() {\n    const author = this.props.author;\n    return (\n      <div>\n        <label htmlFor=\"author\">Author: </label>\n        <input  type={'text'} \n                id={`author`} \n                name={'author'}\n                value={author} \n                onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nclass BookTitleInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.props.onInputChange(e.target.id, e.target.value);\n  }\n  render() {\n    const title = this.props.title;\n    return (\n      <div>\n        <label htmlFor=\"title\">Title: </label>\n        <input  type={'text'} \n                name={'title'}\n                id={`title`} \n                value={title}\n                onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nclass AddBooks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addNewBook = this.addNewBook.bind(this);\n    this.state = {\n      title: '',\n      author: '',\n      pages: '',\n    };\n  }\n  handleInputChange(id, value) {\n    this.setState({[id]: value});\n  }\n  addNewBook() {\n    this.props.onSubmitNewBook(this.state.title, this.state.author, this.state.pages);\n  }\n  render() {\n    const title = this.state.title;\n    const author = this.state.author;\n    const pages = this.state.pages;\n    return (\n      <div>\n        <h1>Add A Book!</h1>\n        <BookTitleInput \n          title={title}\n          onInputChange={this.handleInputChange} />\n        <br />\n        <BookAuthorInput \n          author={author}\n          onInputChange={this.handleInputChange} />\n        <br />\n        <BookPagesInput \n          pages={pages}\n          onInputChange={this.handleInputChange} />\n        <br />\n        <button id={`newBook`} onClick={this.addNewBook}>Place On Shelf</button>\n      </div>\n    );\n  }\n}\n\nclass SingleBook extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeReadStatus = this.handleChangeReadStatus.bind(this);\n    this.handleRemoveBook = this.handleRemoveBook.bind(this);\n  }\n  handleChangeReadStatus(e) {\n    this.props.onReadStatusChange(e.target.id);\n  }\n  handleRemoveBook(e) {\n    this.props.onRemoveBook(e.target.id);\n  }\n  render() {\n    const book = this.props.book;\n    return (\n      <tr>\n        <td>{book.title}</td>\n        <td>{book.author}</td>\n        <td>{book.pages}</td>\n        <td><button className={`toggleRead`} \n                    id={book.title.replace(/\\s+/g, '')} \n                    onClick={this.handleChangeReadStatus}>{book.hasRead ? 'Read' : 'Not Read'}\n                    </button>\n                    </td>\n        <td><button id={book.title.replace(/\\s+/g, '')}\n                    className={`removeBook ${book.title.replace(/\\s+/g, '')}`}\n                    onClick={this.handleRemoveBook}>Remove\n                    </button>\n                    </td>\n      </tr>\n    );\n  }\n}\n\n\nclass DataTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.passReadStatusChange = this.passReadStatusChange.bind(this);\n    this.passRemoveBook = this.passRemoveBook.bind(this);\n  }\n  passReadStatusChange(booktitle) {\n    this.props.changeReadStatus(booktitle);\n  }\n  passRemoveBook(booktitle) {\n    this.props.removeBook(booktitle);\n  }\n  render() {\n    const rows = [];\n\n    this.props.books.forEach(book => {\n      rows.push(\n        <SingleBook\n        book={book}\n        key={book.title}\n        onReadStatusChange={this.passReadStatusChange}\n        onRemoveBook={this.passRemoveBook} />\n      );\n    });\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Author</th>\n            <th>Pages</th>\n            <th>Read Status</th>\n            <th>Remove</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n}\n\nclass TableHeader extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Book Library!</h1>\n      </div>\n    );\n  }\n}\n\nclass Library extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addABook = this.addABook.bind(this);\n    this.changeReadStatus = this.changeReadStatus.bind(this);\n    this.removeBook = this.removeBook.bind(this);\n    this.state = {\n      books: [\n        {title: 'The Hobbit', author: 'J.R.R Tolkien', pages: 295, hasRead: false},\n        {title: 'Holes', author: 'Louis Sachar', pages: 240, hasRead: false},\n        {title: 'A Game of Thrones', author: 'George R.R. Martin', pages: 694, hasRead: false}\n      ],\n    };\n  }\n  changeReadStatus(booktitle) {\n    const thebooks = this.state.books;\n    const newArray = [];\n    thebooks.forEach((book) => {\n      if (book.title.replace(/\\s+/g, '') === booktitle) {\n        book.hasRead = !book.hasRead;\n      }\n      newArray.push(book);\n    });\n    this.setState(\n      { books: newArray }\n    );\n  }\n  removeBook(bookTitle) {\n    const thebooks = this.state.books;\n    const newArray = [];\n    thebooks.forEach((book) => {\n      if (book.title.replace(/\\s+/g, '') !== bookTitle) {\n        newArray.push(book);\n      }\n    });\n    this.setState(\n      { books: newArray }\n    );\n  }\n  addABook(title, author, pages) {\n    const newBook = {\n      title,\n      author,\n      pages,\n      hasRead: false\n    }\n    this.setState(\n      { books: [...this.state.books, newBook] }\n    )\n  }\n  render() {\n    return (\n      <div>\n        <TableHeader />\n        <DataTable  books={this.state.books}\n                    changeReadStatus={this.changeReadStatus}\n                    removeBook={this.removeBook}/>\n        <AddBooks onSubmitNewBook={this.addABook} />\n      </div>\n    );\n  }\n}\n\n// const BOOKS = [\n//   {title: 'The Hobbit', author: 'J.R.R Tolkien', pages: 295, hasRead: false},\n//   {title: 'Holes', author: 'Louis Sachar', pages: 240, hasRead: false},\n//   {title: 'A Game of Thrones', author: 'George R.R. Martin', pages: 694, hasRead: false}\n// ];\n\nReactDOM.render(\n  <React.StrictMode>\n    <Library />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}